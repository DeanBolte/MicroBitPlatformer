from microbit import *
import music

xLocal = 2
yLocal = 4
xGlobal = 0
objectYMax = 4
TERRAIN = [4,4,4,4,4,3,3,3,3,2,2,3,3,3,1,1,1,3,3,4,4,4,4,4,-1,4,4,4,4]
DEATH = [Image('99999:''99999:''99999:''99999:''99999:'),Image('00000:''09990:''09990:''09990:''00000:'),Image('00000:''00000:''00900:''00000:''00000:')]
playState = 'ground'
#display.scroll('v0.3')
gameState = 'idle'
count = 0
stepCount = 4
ENDZONE = -1

# --- player functions ---
def falling():
    yLocal += 1
    playState = 'ground'

def jump(jumpHeight):
    if(jumpHeight > 2):
        yLocal -= 1
        jumpHeight -= 1
    elif(height > 0):
        jumpHeight -= 1
    else:
        playState = 'ground'

# --- game functions ---
def gameStart():
    xLocal = 2
    yLocal = 4
    gameState = 'idle'

def transition(stateTo):
    if(stateTo == 'play'):
        pixelDistance = 2
        while(pixelDistance >= 0):
            display.clear()
            display.set_pixel(pixelDistance,yLocal,6)
            pixelDistance -= 1
            sleep(100)
        return 'play'
    elif(stateTo == 'idle'):
        pixelDistance = 0
        while(pixelDistance <= 2):
            display.clear()
            display.set_pixel(pixelDistance,yLocal,6)
            pixelDistance += 1
            sleep(100)
        return 'idle'

#mostly for future proofing and otherwise redundant
def gameRestart():
    gameStart()

def gameWin():
    display.scroll('WIN!')
    gameRestart()

def gameLose():
    music.play(music.DADADADUM, wait = False)
    for i in range(0,3,1):
        display.show(DEATH[i])
        sleep(50)
    display.scroll('LOSE!')
    gameRestart()

# --- frame functions ---
def frameEnd():
    sleep(100)

# --- main runtime environment ---
gameStart()

while True:
    display.clear()

    if(gameState == 'play'):
        #win requirement (end of Terrain array)
        if(TERRAIN[xGlobal] == ENDZONE):
            gameWin()

        #draw TERRAIN
        if(xGlobal+4 < len(TERRAIN)):
            for i in range(0,5,1):
                for j in range(0,5,1):
                    if(TERRAIN[xGlobal+i] == -1):
                        display.set_pixel(i,j,2)
                    elif(TERRAIN[xGlobal+i] < j):
                        display.set_pixel(i,j,8)

        #jump when on ground
        if(playState == 'ground'):
            if(button_a.is_pressed()):
                #broken ----------------------------------------------
                jump(5)
                music.play(music.JUMP_UP, wait = False)

        #player is being affected by gravity
        if(yLocal < TERRAIN[xGlobal] and playState == 'ground'):
            falling()

        #if colliding with a wall
        if(yLocal > TERRAIN[xGlobal] and TERRAIN[xGlobal] != -1):
            gameLose()

        #transition from play to idle
        if(playState == 'ground' and button_b.is_pressed()):
            gameState = transition('idle')
            xLocal = 2

        #move forward one pixel every time zFrame reaches 0
        if(stepCount <= 0 and xGlobal < len(TERRAIN) - 1):
            xGlobal += 1
            stepCount = 4
        else:
            stepCount -= 1

    #transition into play
    if(gameState == 'idle' and button_b.is_pressed()):
        gameState = transition('play')
        xGlobal = 0
        xLocal = 0

    #if player is within screen bounds, draw player
    if(yLocal >= 0):
        display.set_pixel(xLocal,yLocal,6)

    frameEnd()
